NIfTImatlab
===========

Classes and functions to read and  write NIfTI image files using
Matlab (Version 7, R14, or later). 

The package contains the tested version of the nifticlib and znzlib.

Build
=====

From the top level:

     $ autoconf     
     $ ./configure
     $ make all

The needed mexfile is build using the user's current matlab version:
if $TMW_ROOT is defined, the mex program used is $TMW_ROOT/bin/mex,
otherwise the mex program used is found in the same directory as the
matlab command ("dirname `which matlab`".) If another matlab version
is desired, specify $TMW_ROOT accordingly.

Description
===========

The package is composed of two classes called "niftifile" and
"niftiheader" and all operations are performed via the "niftifile"
class. The class overloads the built-in matlab "fopen", "fclose",
"fread" and "fwrite" functions and allows the user to operate on NIfTI
image files like any other file without having to know the structure
of the NIfTI header.

The low-level I/O operations, including checking the header's
consistency, are handled via functions contained in the "niftiio"
library the is freely distributed with the NIfTI header definition.

To use classes, copy subdirectories "@niftifile" and "@niftiheader"
(in ./matlab/) to a working directory.  When running Matlab, add the
working directory to the path. Help niftifile will give you a starting
point. E.g.:

       $ cp -r matalab/@niftifile /usr/local/matlab
       $ cp -r matalab/@niftiheader /usr/local/matlab
       $ matlab
       >> addpath('/netbin/matlab/cbi/');
       >> help niftifile
	display(nfd)

	[nfd] = fopen(nfd, mode)
	[nfd, data, size] = fread(nfd, numpix)
	[nfd] = fseek(nfd, offset, origin)
	[nfd, size] = fwrite(nfd, data, numpix)
	val = get(nfd, prop)
	[nfd] = niftifile(name, iniOb)
	nfd = set(nfd, propname, propval, ...)
	[nfd] = subsasgn(nfd, index, val)
	[val] = subsref(nfd, index)


      niftifile is both a directory and a function.

        [nfd] = niftifile(name, iniOb)

	niftifile Constructor

	Create a niftifile object, derived from niftiheader and with file information

	nfd = niftifile()           Create object with default values for niftiheader
				    File name will have to be set with 'name' assignment.

	nfd = niftifile(NAME)       Create object with default values and set file to NAME
				    If extension is present, nifti type will be inferred with
				    precendence given to NIfTI dual file over ANALYZE 7.5.
				    If no extension given, type will have to be set with 'type'
				    assignment.

	nfd = niftifile(NAME,INIOB) Create object using values from INIOB object, set file to NAME.
				    If name contains extension which is not compatible with type in
				    INIOB, new type will be inferred with precendence given to NIfTI
				    dual file over ANALYZE 7.5.

      Return: nifti file handle to be used for all I/O ops


      Special assignments:

        nfd.name = NAME             Store name using type and compression information
	nfd.type = TYPE             Modify file names to be consistent with TYPE
				    TYPE = 'ANALYZE', 'SINGLE', 'DUAL', 'ASCII'
	nfd.compress = true/false   Modify file names to be consistent with value

      Methods:

        fopen(nfd, mode)                    = open file for 'read' or 'write', process header
	fclose(nfd)
	fread(nfd, <num pixels>)            = read pixels from file
	fwrite(nfd, data, <num pixels>)     = write pixels to file
	fseek(nfd, offset, [origin])        = set file position to offset bytes from origin
